{"version":3,"file":"initWindows.test.js","sourceRoot":"","sources":["../../src/e2etest/initWindows.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {commanderNameToOptionName} from '@react-native-windows/telemetry';\n\nimport {\n  initOptions,\n  InitOptions,\n} from '../commands/initWindows/initWindowsOptions';\n\nimport * as nameHelpers from '../utils/nameHelpers';\n\nfunction validateOptionName(\n  name: string,\n  optionName: keyof InitOptions,\n): boolean {\n  // Do not add a default case here. Every item must explicitly return true\n  switch (optionName) {\n    case 'logging':\n    case 'template':\n    case 'name':\n    case 'namespace':\n    case 'overwrite':\n    case 'telemetry':\n    case 'list':\n      return true;\n  }\n  throw new Error(\n    `Unable to find ${optionName} to match '${name}' in InitOptions.`,\n  );\n}\n\ntest('initOptions - validate options', () => {\n  for (const commandOption of initOptions) {\n    // Validate names\n    expect(commandOption.name).not.toBeNull();\n    expect(commandOption.name.startsWith('--')).toBe(true);\n    expect(commandOption.name).toBe(commandOption.name.trim());\n\n    // Validate defaults\n    if (\n      !commandOption.name.endsWith(' [string]') &&\n      !commandOption.name.endsWith(' [number]')\n    ) {\n      // Commander ignores defaults for flags, so leave undefined to prevent confusion\n      expect(commandOption.default).toBeUndefined();\n    }\n\n    // Validate description\n    expect(commandOption.description).not.toBeNull();\n    expect(commandOption.description!).toBe(commandOption.description!.trim());\n\n    // Validate all command options are present in InitOptions\n    const optionName = commanderNameToOptionName(commandOption.name);\n    expect(\n      validateOptionName(commandOption.name, optionName as keyof InitOptions),\n    ).toBe(true);\n  }\n});\n\ntest('nameHelpers - cleanName', () => {\n  expect(nameHelpers.cleanName('@scope/package')).toBe('Package');\n  expect(nameHelpers.cleanName('@scope/package-name')).toBe('PackageName');\n  expect(nameHelpers.cleanName('package')).toBe('Package');\n  expect(nameHelpers.cleanName('package-name')).toBe('PackageName');\n});\n\ntest('nameHelpers - isValidProjectName', () => {\n  expect(nameHelpers.isValidProjectName('package')).toBe(true);\n  expect(nameHelpers.isValidProjectName('package-name')).toBe(false);\n  expect(nameHelpers.isValidProjectName('Package')).toBe(true);\n  expect(nameHelpers.isValidProjectName('Package-name')).toBe(false);\n  expect(nameHelpers.isValidProjectName('Package-Name')).toBe(false);\n  expect(nameHelpers.isValidProjectName('@scope/package')).toBe(false);\n  expect(nameHelpers.isValidProjectName('@scope/package-name')).toBe(false);\n});\n\ntest('nameHelpers - cleanNamespace', () => {\n  expect(nameHelpers.cleanNamespace('@scope/package')).toBe('Package');\n  expect(nameHelpers.cleanNamespace('@scope/package-name')).toBe('PackageName');\n  expect(nameHelpers.cleanNamespace('package')).toBe('Package');\n  expect(nameHelpers.cleanNamespace('package-name')).toBe('PackageName');\n  expect(nameHelpers.cleanNamespace('com.company.app')).toBe('Com.Company.App');\n  expect(nameHelpers.cleanNamespace('com.company.app-name')).toBe(\n    'Com.Company.AppName',\n  );\n  expect(nameHelpers.cleanNamespace('com.company.app-name.other')).toBe(\n    'Com.Company.AppName.Other',\n  );\n  expect(nameHelpers.cleanNamespace('com::company::app')).toBe(\n    'Com.Company.App',\n  );\n  expect(nameHelpers.cleanNamespace('com::company::app-name')).toBe(\n    'Com.Company.AppName',\n  );\n  expect(nameHelpers.cleanNamespace('com::company::app-name::other')).toBe(\n    'Com.Company.AppName.Other',\n  );\n});\n\ntest('nameHelpers - isValidProjectNamespace', () => {\n  expect(nameHelpers.isValidProjectNamespace('package')).toBe(true);\n  expect(nameHelpers.isValidProjectNamespace('package-name')).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('Package')).toBe(true);\n  expect(nameHelpers.isValidProjectNamespace('Package-name')).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('Package-Name')).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('@scope/package')).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('@scope/package-name')).toBe(\n    false,\n  );\n  expect(nameHelpers.isValidProjectNamespace('com.company.app')).toBe(true);\n  expect(nameHelpers.isValidProjectNamespace('com.company.app-name')).toBe(\n    false,\n  );\n  expect(\n    nameHelpers.isValidProjectNamespace('com.company.app-name.other'),\n  ).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('com::company::app')).toBe(false);\n  expect(nameHelpers.isValidProjectNamespace('com::company::app-name')).toBe(\n    false,\n  );\n  expect(\n    nameHelpers.isValidProjectNamespace('com::company::app-name::other'),\n  ).toBe(false);\n});\n"]}