"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const telemetry_1 = require("@react-native-windows/telemetry");
const initWindowsOptions_1 = require("../commands/initWindows/initWindowsOptions");
const nameHelpers = __importStar(require("../utils/nameHelpers"));
function validateOptionName(name, optionName) {
    // Do not add a default case here. Every item must explicitly return true
    switch (optionName) {
        case 'logging':
        case 'template':
        case 'name':
        case 'namespace':
        case 'overwrite':
        case 'telemetry':
        case 'list':
            return true;
    }
    throw new Error(`Unable to find ${optionName} to match '${name}' in InitOptions.`);
}
test('initOptions - validate options', () => {
    for (const commandOption of initWindowsOptions_1.initOptions) {
        // Validate names
        expect(commandOption.name).not.toBeNull();
        expect(commandOption.name.startsWith('--')).toBe(true);
        expect(commandOption.name).toBe(commandOption.name.trim());
        // Validate defaults
        if (!commandOption.name.endsWith(' [string]') &&
            !commandOption.name.endsWith(' [number]')) {
            // Commander ignores defaults for flags, so leave undefined to prevent confusion
            expect(commandOption.default).toBeUndefined();
        }
        // Validate description
        expect(commandOption.description).not.toBeNull();
        expect(commandOption.description).toBe(commandOption.description.trim());
        // Validate all command options are present in InitOptions
        const optionName = (0, telemetry_1.commanderNameToOptionName)(commandOption.name);
        expect(validateOptionName(commandOption.name, optionName)).toBe(true);
    }
});
test('nameHelpers - cleanName', () => {
    expect(nameHelpers.cleanName('@scope/package')).toBe('Package');
    expect(nameHelpers.cleanName('@scope/package-name')).toBe('PackageName');
    expect(nameHelpers.cleanName('package')).toBe('Package');
    expect(nameHelpers.cleanName('package-name')).toBe('PackageName');
});
test('nameHelpers - isValidProjectName', () => {
    expect(nameHelpers.isValidProjectName('package')).toBe(true);
    expect(nameHelpers.isValidProjectName('package-name')).toBe(false);
    expect(nameHelpers.isValidProjectName('Package')).toBe(true);
    expect(nameHelpers.isValidProjectName('Package-name')).toBe(false);
    expect(nameHelpers.isValidProjectName('Package-Name')).toBe(false);
    expect(nameHelpers.isValidProjectName('@scope/package')).toBe(false);
    expect(nameHelpers.isValidProjectName('@scope/package-name')).toBe(false);
});
test('nameHelpers - cleanNamespace', () => {
    expect(nameHelpers.cleanNamespace('@scope/package')).toBe('Package');
    expect(nameHelpers.cleanNamespace('@scope/package-name')).toBe('PackageName');
    expect(nameHelpers.cleanNamespace('package')).toBe('Package');
    expect(nameHelpers.cleanNamespace('package-name')).toBe('PackageName');
    expect(nameHelpers.cleanNamespace('com.company.app')).toBe('Com.Company.App');
    expect(nameHelpers.cleanNamespace('com.company.app-name')).toBe('Com.Company.AppName');
    expect(nameHelpers.cleanNamespace('com.company.app-name.other')).toBe('Com.Company.AppName.Other');
    expect(nameHelpers.cleanNamespace('com::company::app')).toBe('Com.Company.App');
    expect(nameHelpers.cleanNamespace('com::company::app-name')).toBe('Com.Company.AppName');
    expect(nameHelpers.cleanNamespace('com::company::app-name::other')).toBe('Com.Company.AppName.Other');
});
test('nameHelpers - isValidProjectNamespace', () => {
    expect(nameHelpers.isValidProjectNamespace('package')).toBe(true);
    expect(nameHelpers.isValidProjectNamespace('package-name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('Package')).toBe(true);
    expect(nameHelpers.isValidProjectNamespace('Package-name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('Package-Name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('@scope/package')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('@scope/package-name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('com.company.app')).toBe(true);
    expect(nameHelpers.isValidProjectNamespace('com.company.app-name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('com.company.app-name.other')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('com::company::app')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('com::company::app-name')).toBe(false);
    expect(nameHelpers.isValidProjectNamespace('com::company::app-name::other')).toBe(false);
});
//# sourceMappingURL=initWindows.test.js.map