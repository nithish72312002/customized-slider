"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 * @format
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanNamespace = exports.isValidProjectNamespace = exports.cleanName = exports.isValidProjectName = void 0;
const lodash_1 = __importDefault(require("lodash"));
function pascalCase(str) {
    const camelCase = lodash_1.default.camelCase(str);
    return camelCase[0].toUpperCase() + camelCase.substr(1);
}
function isValidProjectName(name) {
    if (name.match(/^[a-z][a-z0-9]*$/gi)) {
        return true;
    }
    return false;
}
exports.isValidProjectName = isValidProjectName;
function cleanName(str) {
    str = str.replace('@', ''); // Remove '@' from package scope names
    str = str.slice(str.lastIndexOf('/') + 1); // Remove package scope
    str = pascalCase(str); // Convert to PascalCase
    return str;
}
exports.cleanName = cleanName;
function isValidProjectNamespace(namespace) {
    if (namespace
        .split(/[.]+/)
        .map(isValidProjectName)
        .every(x => x)) {
        // Validate that every part of the namespace is a valid project name
        return true;
    }
    return false;
}
exports.isValidProjectNamespace = isValidProjectNamespace;
function cleanNamespace(str) {
    return str.split(/[.:]+/).map(cleanName).join('.');
}
exports.cleanNamespace = cleanNamespace;
//# sourceMappingURL=nameHelpers.js.map