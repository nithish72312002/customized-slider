{"version":3,"file":"ValidateMethods.js","sourceRoot":"","sources":["../../src/generators/ValidateMethods.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,YAAY,CAAC;;;AAUb,6CAIsB;AACtB,+CAA+E;AAE/E,SAAS,YAAY,CAAC,QAA4C;IAChE,OAAO,CACL,QAAQ,CAAC,oBAAoB,CAAC,IAAI,KAAK,oBAAoB;QAC3D,QAAQ,CAAC,oBAAoB,CAAC,IAAI,KAAK,uBAAuB,CAC/D,CAAC;AACJ,CAAC;AAED,SAAS,2BAA2B,CAClC,IAA+B,EAC/B,QAA4C,EAC5C,OAAiB,EACjB,aAAqB,EACrB,OAA0B;IAE1B,MAAM,IAAI,GAAG,IAAA,0BAAa,EAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IAC7E,IAAI,QAAQ,CAAC,oBAAoB,CAAC,IAAI,KAAK,uBAAuB,EAAE;QAClE,IAAI,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE;YAC7C,IAAI,CAAC,IAAI,CACP,yBAAyB,IAAA,qCAAuB,EAC9C,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EACzC,OAAO,EACP,aAAa,EACb,OAAO,CACR,YAAY,CACd,CAAC;SACH;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;SAC/D;KACF;IAED,qFAAqF;IACrF,MAAM,GAAG,GAAG,SAAS,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UACxD,IAAI,CAAC,IACP,KAAK,IAAA,qCAAuB,EAC1B,QAAQ,CAAC,oBAAoB,EAC7B,OAAO,EACP,aAAa,EACb,OAAO,CACR,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC;IAEvE,MAAM,SAAS,GAAG,SAAS,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAC9D,IAAI,CAAC,IACP,YAAY,IAAA,qCAAuB,EACjC,QAAQ,CAAC,oBAAoB,EAC7B,OAAO,EACP,aAAa,EACb,OAAO,CACR,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC;IAEvE,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAC1B,CAAC;AAED,SAAS,iCAAiC,CACxC,IAA+B,EAC/B,QAA4C,EAC5C,OAAiB,EACjB,aAAqB,EACrB,OAA0B;IAE1B,OAAO,2BAA2B,CAChC,IAAI,EACJ,QAAQ,EACR,OAAO,EACP,aAAa,EACb,OAAO,CACR;SACE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,GAAG,MAAM,CAAC;SAC7B,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1B,CAAC;AAED,SAAS,gBAAgB,CACvB,OAAiD,EACjD,OAAiB,EACjB,KAAc,EACd,OAA0B;IAE1B,oCAAoC;IACpC,MAAM,UAAU,GAAG,OAAO;SACvB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC;SAC5C,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QACnB,+BAA+B;QAC/B,8DAA8D;QAC9D,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC;QAChC,MAAM,QAAQ,GACZ,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,wBAAwB;YACnD,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc;YACpC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QAE1B,MAAM,aAAa,GAAG,IAAA,8BAAiB,EACrC,QAAQ,CAAC,MAAM,EACf,OAAO,EACP,aAAa,EACb,OAAO,CACR,CAAC;QAEF,MAAM,qBAAqB,GAAG,IAAA,qCAAuB,EACnD,QAAQ,CAAC,oBAAoB,EAC7B,OAAO,EACP,aAAa,EACb,OAAO,CACR,CAAC;QAEF,IAAI,QAAQ,CAAC,oBAAoB,CAAC,IAAI,KAAK,uBAAuB,EAAE;YAClE,IAAI,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE;gBAC7C,aAAa,CAAC,IAAI,CAChB,WAAW,IAAA,qCAAuB,EAChC,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EACzC,OAAO,EACP,aAAa,EACb,OAAO,CACR,GAAG,CACL,CAAC;aACH;iBAAM;gBACL,aAAa,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;aACjD;SACF;QAED,IAAI,KAAK,EAAE;YACT,OAAO,SACL,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EACpC,UAAU,qBAAqB,IAAI,aAAa,CAAC,IAAI,CACnD,IAAI,CACL,eAAe,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC;SAC5C;aAAM;YACL,OAAO;YACH,KAAK;aACJ,IAAI,CAAC,IAAI;YACV,iCAAiC,CACjC,IAAI,EACJ,QAAQ,EACR,OAAO,EACP,aAAa,EACb,OAAO,CACR,IAAI,CAAC;SACT;IACH,CAAC,CAAC,CAAC;IAEL,OAAO,EAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,kBAAkB,EAAE,UAAU,CAAC,MAAM,EAAC,CAAC;AAC9E,CAAC;AAED,SAAS,iCAAiC,CACxC,YAA2C,EAC3C,OAAiB,EACjB,OAA0B;IAE1B,MAAM,aAAa,GAAG,IAAA,sCAAyB,EAC7C,YAAY,CAAC,cAAc,CAAC,cAAc,EAC1C,OAAO,EACP,YAAY,CAAC,IAAI,EACjB,OAAO,CACR,CAAC;IACF,OAAO;QACL,eAAe,YAAY,CAAC,IAAI,wBAAwB,aAAa,MAAM,YAAY,CAAC,IAAI,GAAG;KAChG,CAAC;AACJ,CAAC;AAED,SAAS,gCAAgC,CACvC,YAA2C,EAC3C,OAAiB,EACjB,OAA0B;IAE1B,OAAO,iCAAiC,CAAC,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC;SACrE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,GAAG,MAAM,CAAC;SAC7B,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1B,CAAC;AAED,SAAS,mBAAmB,CAC1B,aAA2D,EAC3D,WAAmB,EACnB,OAAiB,EACjB,KAAc,EACd,OAA0B;IAE1B,OAAO,aAAa;SACjB,GAAG,CAAC,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;QAC3B,MAAM,aAAa,GAAG,IAAA,sCAAyB,EAC7C,YAAY,CAAC,cAAc,CAAC,cAAc,EAC1C,OAAO,EACP,YAAY,CAAC,IAAI,EACjB,OAAO,CACR,CAAC;QAEF,IAAI,KAAK,EAAE;YACT,OAAO,2BAA2B,aAAa,MAC7C,KAAK,GAAG,WACV,OAAO,YAAY,CAAC,IAAI,KAAK,CAAC;SAC/B;aAAM;YACL,OAAO;YACH,KAAK,GAAG,WAAW;aAClB,YAAY,CAAC,IAAI;YAClB,gCAAgC,CAChC,YAAY,EACZ,OAAO,EACP,OAAO,CACR,IAAI,CAAC;SACT;IACH,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,SAAgB,uBAAuB,CACrC,YAAgC,EAChC,OAAiB,EACjB,OAA0B;IAO1B,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;IAC1C,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC;IACtD,MAAM,mBAAmB,GAAG,gBAAgB,CAC1C,OAAO,EACP,OAAO,EACP,KAAK,EACL,OAAO,CACR,CAAC;IACF,MAAM,sBAAsB,GAAG,mBAAmB,CAChD,aAAa,EACb,mBAAmB,CAAC,kBAAkB,EACtC,OAAO,EACP,KAAK,EACL,OAAO,CACR,CAAC;IACF,MAAM,uBAAuB,GAAG,gBAAgB,CAC9C,OAAO,EACP,OAAO,EACP,IAAI,EACJ,OAAO,CACR,CAAC;IACF,MAAM,2BAA2B,GAAG,mBAAmB,CACrD,aAAa,EACb,mBAAmB,CAAC,kBAAkB,EACtC,OAAO,EACP,IAAI,EACJ,OAAO,CACR,CAAC;IACF,OAAO;QACL,uBAAuB,EAAE,uBAAuB,CAAC,IAAI;QACrD,2BAA2B;QAC3B,mBAAmB,EAAE,mBAAmB,CAAC,IAAI;QAC7C,sBAAsB;KACvB,CAAC;AACJ,CAAC;AA5CD,0DA4CC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {\n  NativeModuleEventEmitterShape,\n  NativeModuleFunctionTypeAnnotation,\n  NativeModulePropertyShape,\n  NativeModuleSchema,\n} from '@react-native/codegen/lib/CodegenSchema';\nimport {AliasMap} from './AliasManaging';\nimport type {CppCodegenOptions} from './ObjectTypes';\nimport {\n  translateArgs,\n  translateSpecArgs,\n  translateEventEmitterArgs,\n} from './ParamTypes';\nimport {translateImplReturnType, translateSpecReturnType} from './ReturnTypes';\n\nfunction isMethodSync(funcType: NativeModuleFunctionTypeAnnotation) {\n  return (\n    funcType.returnTypeAnnotation.type !== 'VoidTypeAnnotation' &&\n    funcType.returnTypeAnnotation.type !== 'PromiseTypeAnnotation'\n  );\n}\n\nfunction getPossibleMethodSignatures(\n  prop: NativeModulePropertyShape,\n  funcType: NativeModuleFunctionTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n): string[] {\n  const args = translateArgs(funcType.params, aliases, baseAliasName, options);\n  if (funcType.returnTypeAnnotation.type === 'PromiseTypeAnnotation') {\n    if (funcType.returnTypeAnnotation.elementType) {\n      args.push(\n        `::React::ReactPromise<${translateImplReturnType(\n          funcType.returnTypeAnnotation.elementType,\n          aliases,\n          baseAliasName,\n          options,\n        )}> &&result`,\n      );\n    } else {\n      args.push('::React::ReactPromise<::React::JSValue> &&result');\n    }\n  }\n\n  // TODO: be much more exhaustive on the possible method signatures that can be used..\n  const sig = `REACT_${isMethodSync(funcType) ? 'SYNC_' : ''}METHOD(${\n    prop.name\n  }) ${translateImplReturnType(\n    funcType.returnTypeAnnotation,\n    aliases,\n    baseAliasName,\n    options,\n  )} ${prop.name}(${args.join(', ')}) noexcept { /* implementation */ }`;\n\n  const staticsig = `REACT_${isMethodSync(funcType) ? 'SYNC_' : ''}METHOD(${\n    prop.name\n  }) static ${translateImplReturnType(\n    funcType.returnTypeAnnotation,\n    aliases,\n    baseAliasName,\n    options,\n  )} ${prop.name}(${args.join(', ')}) noexcept { /* implementation */ }`;\n\n  return [sig, staticsig];\n}\n\nfunction translatePossibleMethodSignatures(\n  prop: NativeModulePropertyShape,\n  funcType: NativeModuleFunctionTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n): string {\n  return getPossibleMethodSignatures(\n    prop,\n    funcType,\n    aliases,\n    baseAliasName,\n    options,\n  )\n    .map(sig => `\"    ${sig}\\\\n\"`)\n    .join('\\n          ');\n}\n\nfunction renderProperties(\n  methods: ReadonlyArray<NativeModulePropertyShape>,\n  aliases: AliasMap,\n  tuple: boolean,\n  options: CppCodegenOptions,\n): {code: string; numberOfProperties: number} {\n  // TODO: generate code for constants\n  const properties = methods\n    .filter(prop => prop.name !== 'getConstants')\n    .map((prop, index) => {\n      // TODO: prop.optional === true\n      // TODO: prop.typeAnnotation.type === 'NullableTypeAnnotation'\n      const propAliasName = prop.name;\n      const funcType =\n        prop.typeAnnotation.type === 'NullableTypeAnnotation'\n          ? prop.typeAnnotation.typeAnnotation\n          : prop.typeAnnotation;\n\n      const traversedArgs = translateSpecArgs(\n        funcType.params,\n        aliases,\n        propAliasName,\n        options,\n      );\n\n      const translatedReturnParam = translateSpecReturnType(\n        funcType.returnTypeAnnotation,\n        aliases,\n        propAliasName,\n        options,\n      );\n\n      if (funcType.returnTypeAnnotation.type === 'PromiseTypeAnnotation') {\n        if (funcType.returnTypeAnnotation.elementType) {\n          traversedArgs.push(\n            `Promise<${translateSpecReturnType(\n              funcType.returnTypeAnnotation.elementType,\n              aliases,\n              propAliasName,\n              options,\n            )}>`,\n          );\n        } else {\n          traversedArgs.push('Promise<::React::JSValue>');\n        }\n      }\n\n      if (tuple) {\n        return `      ${\n          isMethodSync(funcType) ? 'Sync' : ''\n        }Method<${translatedReturnParam}(${traversedArgs.join(\n          ', ',\n        )}) noexcept>{${index}, L\"${prop.name}\"},`;\n      } else {\n        return `    REACT_SHOW_METHOD_SPEC_ERRORS(\n          ${index},\n          \"${prop.name}\",\n          ${translatePossibleMethodSignatures(\n            prop,\n            funcType,\n            aliases,\n            propAliasName,\n            options,\n          )});`;\n      }\n    });\n\n  return {code: properties.join('\\n'), numberOfProperties: properties.length};\n}\n\nfunction getPossibleEventEmitterSignatures(\n  eventEmitter: NativeModuleEventEmitterShape,\n  aliases: AliasMap,\n  options: CppCodegenOptions,\n): string[] {\n  const traversedArgs = translateEventEmitterArgs(\n    eventEmitter.typeAnnotation.typeAnnotation,\n    aliases,\n    eventEmitter.name,\n    options,\n  );\n  return [\n    `REACT_EVENT(${eventEmitter.name}) std::function<void(${traversedArgs})> ${eventEmitter.name};`,\n  ];\n}\n\nfunction translatePossibleEventSignatures(\n  eventEmitter: NativeModuleEventEmitterShape,\n  aliases: AliasMap,\n  options: CppCodegenOptions,\n): string {\n  return getPossibleEventEmitterSignatures(eventEmitter, aliases, options)\n    .map(sig => `\"    ${sig}\\\\n\"`)\n    .join('\\n          ');\n}\n\nfunction renderEventEmitters(\n  eventEmitters: ReadonlyArray<NativeModuleEventEmitterShape>,\n  indexOffset: number,\n  aliases: AliasMap,\n  tuple: boolean,\n  options: CppCodegenOptions,\n): string {\n  return eventEmitters\n    .map((eventEmitter, index) => {\n      const traversedArgs = translateEventEmitterArgs(\n        eventEmitter.typeAnnotation.typeAnnotation,\n        aliases,\n        eventEmitter.name,\n        options,\n      );\n\n      if (tuple) {\n        return `      EventEmitter<void(${traversedArgs})>{${\n          index + indexOffset\n        }, L\"${eventEmitter.name}\"},`;\n      } else {\n        return `    REACT_SHOW_EVENTEMITTER_SPEC_ERRORS(\n          ${index + indexOffset},\n          \"${eventEmitter.name}\",\n          ${translatePossibleEventSignatures(\n            eventEmitter,\n            aliases,\n            options,\n          )});`;\n      }\n    })\n    .join('\\n');\n}\n\nexport function generateValidateMethods(\n  nativeModule: NativeModuleSchema,\n  aliases: AliasMap,\n  options: CppCodegenOptions,\n): {\n  traversedProperties: string;\n  traversedEventEmitters: string;\n  traversedPropertyTuples: string;\n  traversedEventEmitterTuples: string;\n} {\n  const methods = nativeModule.spec.methods;\n  const eventEmitters = nativeModule.spec.eventEmitters;\n  const traversedProperties = renderProperties(\n    methods,\n    aliases,\n    false,\n    options,\n  );\n  const traversedEventEmitters = renderEventEmitters(\n    eventEmitters,\n    traversedProperties.numberOfProperties,\n    aliases,\n    false,\n    options,\n  );\n  const traversedPropertyTuples = renderProperties(\n    methods,\n    aliases,\n    true,\n    options,\n  );\n  const traversedEventEmitterTuples = renderEventEmitters(\n    eventEmitters,\n    traversedProperties.numberOfProperties,\n    aliases,\n    true,\n    options,\n  );\n  return {\n    traversedPropertyTuples: traversedPropertyTuples.code,\n    traversedEventEmitterTuples,\n    traversedProperties: traversedProperties.code,\n    traversedEventEmitters,\n  };\n}\n"]}