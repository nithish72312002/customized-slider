{"version":3,"file":"GenerateComponentWindows.js","sourceRoot":"","sources":["../../src/generators/GenerateComponentWindows.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {\n  SchemaType,\n  EventTypeAnnotation,\n  PropTypeAnnotation,\n  ObjectTypeAnnotation,\n  CommandParamTypeAnnotation,\n} from '@react-native/codegen/lib/CodegenSchema';\nimport {getAliasCppName, setPreferredModuleName} from './AliasManaging';\nimport {\n  translateComponentPropsFieldType,\n  translateComponentEventType,\n  translateCommandParamType,\n} from './PropObjectTypes';\nimport type {CppStringTypes} from './ObjectTypes';\nimport type {AliasMap} from './AliasManaging';\n\nexport type {CppStringTypes} from './ObjectTypes';\n\ntype FilesOutput = Map<string, string>;\n\nconst headerTemplate = `/*\n * This file is auto-generated from ::_COMPONENT_NAME_::NativeComponent spec file in flow / TypeScript.\n */\n// clang-format off\n#pragma once\n\n#include <NativeModules.h>\n\n#ifdef RNW_NEW_ARCH\n#include <JSValueComposition.h>\n\n#include <winrt/Microsoft.ReactNative.Composition.h>\n#include <winrt/Microsoft.UI.Composition.h>\n#endif // #ifdef RNW_NEW_ARCH`;\n\nconst propsTemplate = `REACT_STRUCT(::_PROPS_NAME_::)\nstruct ::_PROPS_NAME_:: : winrt::implements<::_PROPS_NAME_::, winrt::Microsoft::ReactNative::IComponentProps> {\n  ::_PROPS_NAME_::(winrt::Microsoft::ReactNative::ViewProps props, const winrt::Microsoft::ReactNative::IComponentProps& cloneFrom)\n    : ViewProps(props)\n  {\n     if (cloneFrom) {\n       auto cloneFromProps = cloneFrom.as<::_PROPS_NAME_::>();\n::_PROP_INITIALIZERS_::  \n     }\n  }\n\n  void SetProp(uint32_t hash, winrt::hstring propName, winrt::Microsoft::ReactNative::IJSValueReader value) noexcept {\n    winrt::Microsoft::ReactNative::ReadProp(hash, propName, value, *this);\n  }\n\n::_PROPS_FIELDS_::\n  const winrt::Microsoft::ReactNative::ViewProps ViewProps;\n};`;\n\nconst propsObjectTemplate = `REACT_STRUCT(::_OBJECT_NAME_::)\nstruct ::_OBJECT_NAME_:: {\n::_OBJECT_FIELDS_::};\n`;\nconst eventsObjectTemplate = `REACT_STRUCT(::_OBJECT_NAME_::)\nstruct ::_OBJECT_NAME_:: {\n::_OBJECT_FIELDS_::};\n`;\n\nconst eventEmitterMethodTemplate = `  void ::_EVENT_NAME_::(::_EVENT_OBJECT_TYPE_:: &value) const {\n    m_eventEmitter.DispatchEvent(L\"::_EVENT_NAME_NO_ON_::\", [value](const winrt::Microsoft::ReactNative::IJSValueWriter writer) {\n      winrt::Microsoft::ReactNative::WriteValue(writer, value);\n    });\n  }`;\n\nconst eventEmitterTemplate = `::_COMPONENT_EVENT_OBJECT_TYPES_::\n\nstruct ::_EVENT_EMITTER_NAME_:: {\n  ::_EVENT_EMITTER_NAME_::(const winrt::Microsoft::ReactNative::EventEmitter &eventEmitter)\n      : m_eventEmitter(eventEmitter) {}\n\n::_EVENT_EMITTER_USINGS_::\n\n::_EVENT_EMITTER_METHODS_::\n\n private:\n  winrt::Microsoft::ReactNative::EventEmitter m_eventEmitter{nullptr};\n};`;\n\nconst baseStructTemplate = `\ntemplate<typename TUserData>\nstruct Base::_COMPONENT_NAME_:: {\n\n  virtual void UpdateProps(\n    const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n    const winrt::com_ptr<::_COMPONENT_NAME_::Props> &newProps,\n    const winrt::com_ptr<::_COMPONENT_NAME_::Props> &/*oldProps*/) noexcept {\n    m_props = newProps;\n  }\n\n  // UpdateLayoutMetrics will only be called if this method is overridden\n  virtual void UpdateLayoutMetrics(\n    const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n    const winrt::Microsoft::ReactNative::LayoutMetrics &/*newLayoutMetrics*/,\n    const winrt::Microsoft::ReactNative::LayoutMetrics &/*oldLayoutMetrics*/) noexcept {\n  }\n\n  // UpdateState will only be called if this method is overridden\n  virtual void UpdateState(\n    const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n    const winrt::Microsoft::ReactNative::IComponentState &/*newState*/) noexcept {\n  }\n\n  virtual void UpdateEventEmitter(const std::shared_ptr<::_COMPONENT_NAME_::EventEmitter> &eventEmitter) noexcept {\n    m_eventEmitter = eventEmitter;\n  }\n\n  // MountChildComponentView will only be called if this method is overridden\n  virtual void MountChildComponentView(const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n           const winrt::Microsoft::ReactNative::MountChildComponentViewArgs &/*args*/) noexcept {\n  }\n\n  // UnmountChildComponentView will only be called if this method is overridden\n  virtual void UnmountChildComponentView(const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n           const winrt::Microsoft::ReactNative::UnmountChildComponentViewArgs &/*args*/) noexcept {\n  }\n\n  // Initialize will only be called if this method is overridden\n  virtual void Initialize(const winrt::Microsoft::ReactNative::ComponentView &/*view*/) noexcept {\n  }\n\n  // CreateVisual will only be called if this method is overridden\n  virtual winrt::Microsoft::UI::Composition::Visual CreateVisual(const winrt::Microsoft::ReactNative::ComponentView &view) noexcept {\n    return view.as<winrt::Microsoft::ReactNative::Composition::ComponentView>().Compositor().CreateSpriteVisual();\n  }\n\n  // FinalizeUpdate will only be called if this method is overridden\n  virtual void FinalizeUpdate(const winrt::Microsoft::ReactNative::ComponentView &/*view*/,\n                                        winrt::Microsoft::ReactNative::ComponentViewUpdateMask /*mask*/) noexcept {\n  }\n\n::_COMPONENT_VIEW_COMMAND_HANDLERS_::\n\n  ::_COMPONENT_VIEW_COMMAND_HANDLER_::\n\n  const std::shared_ptr<::_COMPONENT_NAME_::EventEmitter>& EventEmitter() const { return m_eventEmitter; }\n  const winrt::com_ptr<::_COMPONENT_NAME_::Props>& Props() const { return m_props; }\n\nprivate:\n  winrt::com_ptr<::_COMPONENT_NAME_::Props> m_props;\n  std::shared_ptr<::_COMPONENT_NAME_::EventEmitter> m_eventEmitter;\n};\n`;\n\nconst registerTemplate = `\ntemplate <typename TUserData>\nvoid Register::_COMPONENT_NAME_::NativeComponent(\n    winrt::Microsoft::ReactNative::IReactPackageBuilder const &packageBuilder,\n    std::function<void(const winrt::Microsoft::ReactNative::Composition::IReactCompositionViewComponentBuilder&)> builderCallback) noexcept {\n  packageBuilder.as<winrt::Microsoft::ReactNative::IReactPackageBuilderFabric>().AddViewComponent(\n      L\"::_COMPONENT_NAME_::\", [builderCallback](winrt::Microsoft::ReactNative::IReactViewComponentBuilder const &builder) noexcept {\n        auto compBuilder = builder.as<winrt::Microsoft::ReactNative::Composition::IReactCompositionViewComponentBuilder>();\n\n        builder.SetCreateProps([](winrt::Microsoft::ReactNative::ViewProps props,\n                              const winrt::Microsoft::ReactNative::IComponentProps& cloneFrom) noexcept {\n            return winrt::make<::_COMPONENT_NAME_::Props>(props, cloneFrom); \n        });\n\n        builder.SetUpdatePropsHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                     const winrt::Microsoft::ReactNative::IComponentProps &newProps,\n                                     const winrt::Microsoft::ReactNative::IComponentProps &oldProps) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            userData->UpdateProps(view, newProps ? newProps.as<::_COMPONENT_NAME_::Props>() : nullptr, oldProps ? oldProps.as<::_COMPONENT_NAME_::Props>() : nullptr);\n        });\n\n        compBuilder.SetUpdateLayoutMetricsHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                      const winrt::Microsoft::ReactNative::LayoutMetrics &newLayoutMetrics,\n                                      const winrt::Microsoft::ReactNative::LayoutMetrics &oldLayoutMetrics) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            userData->UpdateLayoutMetrics(view, newLayoutMetrics, oldLayoutMetrics);\n        });\n\n        builder.SetUpdateEventEmitterHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                     const winrt::Microsoft::ReactNative::EventEmitter &eventEmitter) noexcept {\n          auto userData = view.UserData().as<TUserData>();\n          userData->UpdateEventEmitter(std::make_shared<::_COMPONENT_NAME_::EventEmitter>(eventEmitter));\n        });\n\n        if constexpr (&TUserData::FinalizeUpdate != &Base::_COMPONENT_NAME_::<TUserData>::FinalizeUpdate) {\n            builder.SetFinalizeUpdateHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                     winrt::Microsoft::ReactNative::ComponentViewUpdateMask mask) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            userData->FinalizeUpdate(view, mask);\n          });\n        } \n\n        if constexpr (&TUserData::UpdateState != &Base::_COMPONENT_NAME_::<TUserData>::UpdateState) {\n          builder.SetUpdateStateHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                     const winrt::Microsoft::ReactNative::IComponentState &newState) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            userData->member(view, newState);\n          });\n        }\n\n::_REGISTER_CUSTOM_COMMAND_HANDLER_::\n\n        if constexpr (&TUserData::MountChildComponentView != &Base::_COMPONENT_NAME_::<TUserData>::MountChildComponentView) {\n          builder.SetMountChildComponentViewHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                      const winrt::Microsoft::ReactNative::MountChildComponentViewArgs &args) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            return userData->MountChildComponentView(view, args);\n          });\n        }\n\n        if constexpr (&TUserData::UnmountChildComponentView != &Base::_COMPONENT_NAME_::<TUserData>::UnmountChildComponentView) {\n          builder.SetUnmountChildComponentViewHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                      const winrt::Microsoft::ReactNative::UnmountChildComponentViewArgs &args) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            return userData->UnmountChildComponentView(view, args);\n          });\n        }\n\n        compBuilder.SetViewComponentViewInitializer([](const winrt::Microsoft::ReactNative::ComponentView &view) noexcept {\n          auto userData = winrt::make_self<TUserData>();\n          if constexpr (&TUserData::Initialize != &Base::_COMPONENT_NAME_::<TUserData>::Initialize) {\n            userData->Initialize(view);\n          }\n          view.UserData(*userData);\n        });\n\n        if constexpr (&TUserData::CreateVisual != &Base::_COMPONENT_NAME_::<TUserData>::CreateVisual) {\n          compBuilder.SetCreateVisualHandler([](const winrt::Microsoft::ReactNative::ComponentView &view) noexcept {\n            auto userData = view.UserData().as<TUserData>();\n            return userData->CreateVisual(view);\n          });\n        }\n\n        // Allow app to further customize the builder\n        if (builderCallback) {\n          builderCallback(compBuilder);\n        }\n      });\n}\n`;\n\nconst fileTemplate = `\n${headerTemplate}\n\n#ifdef RNW_NEW_ARCH\n\nnamespace ::_NAMESPACE_:: {\n\n::_COMPONENT_PROP_OBJECT_TYPES_::\n::_COMPONENT_PROP_TYPES_::\n\n::_COMPONENT_EVENT_EMITTER_::\n\n::_BASE_COMPONENT_STRUCT_::\n\n::_COMPONENT_REGISTRATION_::\n} // namespace ::_NAMESPACE_::\n\n#endif // #ifdef RNW_NEW_ARCH\n`;\n\nfunction capitalizeFirstLetter(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function createComponentGenerator({\n  namespace,\n  cppStringType,\n}: {\n  namespace: string;\n  cppStringType: CppStringTypes;\n}) {\n  return (\n    _libraryName: string,\n    schema: SchemaType,\n    _moduleSpecName: string,\n  ): FilesOutput => {\n    const files = new Map<string, string>();\n\n    const cppCodegenOptions = {cppStringType};\n\n    for (const componentName of Object.keys(schema.modules)) {\n      const component = schema.modules[componentName];\n      setPreferredModuleName(componentName);\n\n      if (component.type === 'Component') {\n        console.log(`Generating ${componentName}.g.h`);\n\n        const componentShape = component.components[componentName];\n\n        componentShape.extendsProps.forEach(propsBaseType => {\n          if (\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            propsBaseType.type !== 'ReactNativeBuiltInType' ||\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            propsBaseType.knownTypeName !== 'ReactNativeCoreViewProps'\n          ) {\n            throw new Error(\n              'Currently only supports props extending from ViewProps',\n            );\n          }\n        });\n\n        // Props\n        const propObjectAliases: AliasMap<\n          ObjectTypeAnnotation<PropTypeAnnotation>\n        > = {types: {}, jobs: []};\n        const propsName = `${componentName}Props`;\n        const propsFields = componentShape.props\n          .map(prop => {\n            const propType = translateComponentPropsFieldType(\n              prop.typeAnnotation,\n              propObjectAliases,\n              `${propsName}_${prop.name}`,\n              cppCodegenOptions,\n            );\n            return `  REACT_FIELD(${prop.name})\\n  ${\n              prop.optional && !propType.alreadySupportsOptionalOrHasDefault\n                ? `std::optional<${propType.type}>`\n                : propType.type\n            } ${prop.name}${propType.initializer};\\n`;\n          })\n          .join('\\n');\n\n        const propInitializers = componentShape.props\n          .map(prop => {\n            return `       ${prop.name} = cloneFromProps->${prop.name};`;\n          })\n          .join('\\n');\n\n        const propObjectTypes = propObjectAliases.jobs\n          .map(propObjectTypeName => {\n            const propObjectType = propObjectAliases.types[propObjectTypeName]!;\n            const propsObjectFields = propObjectType.properties\n              .map(property => {\n                const propType = translateComponentPropsFieldType(\n                  property.typeAnnotation,\n                  propObjectAliases,\n                  `${propsName}_${property.name}`,\n                  cppCodegenOptions,\n                );\n                return `  REACT_FIELD(${property.name})\\n  ${\n                  property.optional &&\n                  !propType.alreadySupportsOptionalOrHasDefault\n                    ? `std::optional<${propType.type}>`\n                    : propType.type\n                } ${property.name}${propType.initializer};\\n`;\n              })\n              .join('\\n');\n\n            return propsObjectTemplate\n              .replace(\n                /::_OBJECT_NAME_::/g,\n                getAliasCppName(propObjectTypeName),\n              )\n              .replace(/::_OBJECT_FIELDS_::/g, propsObjectFields);\n          })\n          .join('\\n');\n\n        // Events\n        const eventObjectAliases: AliasMap<\n          ObjectTypeAnnotation<EventTypeAnnotation>\n        > = {types: {}, jobs: []};\n        const eventEmitterName = `${componentName}EventEmitter`;\n        const eventEmitterMethods = componentShape.events\n          .filter(event => event.typeAnnotation.argument)\n          .map(event => {\n            if (event.typeAnnotation.argument?.baseTypes) {\n              throw new Error(\n                'Events with base type arguments not currently supported',\n              );\n            }\n\n            // Called to collect the eventObjectAliases\n            translateComponentEventType(\n              event.typeAnnotation.argument!,\n              eventObjectAliases,\n              `${event.name}`,\n              cppCodegenOptions,\n            );\n\n            // onSomething -> something\n            let eventNameLower = event.name.replace('on', '');\n            eventNameLower =\n              eventNameLower[0].toLowerCase() + eventNameLower.slice(1);\n\n            return eventEmitterMethodTemplate\n              .replace(/::_EVENT_NAME_::/g, event.name)\n              .replace(/::_EVENT_NAME_NO_ON_::/g, eventNameLower)\n              .replace(\n                /::_EVENT_OBJECT_TYPE_::/g,\n                event.name.replace('on', 'On'),\n              );\n          })\n          .join('\\n\\n');\n\n        const eventObjects = eventObjectAliases.jobs\n          .map(eventObjectTypeName => {\n            const eventObjectType =\n              eventObjectAliases.types[eventObjectTypeName]!;\n            const eventObjectFields = eventObjectType.properties\n              .map(property => {\n                const eventPropType = translateComponentEventType(\n                  property.typeAnnotation,\n                  eventObjectAliases,\n                  eventObjectTypeName,\n                  cppCodegenOptions,\n                );\n                return `  REACT_FIELD(${property.name})\\n  ${\n                  property.optional &&\n                  !eventPropType.alreadySupportsOptionalOrHasDefault\n                    ? `std::optional<${eventPropType.type}>`\n                    : eventPropType.type\n                } ${property.name}${eventPropType.initializer};\\n`;\n              })\n              .join('\\n');\n            return eventsObjectTemplate\n              .replace(\n                /::_OBJECT_NAME_::/g,\n                `${componentName}_${eventObjectTypeName.replace('on', 'On')}`,\n              )\n              .replace(/::_OBJECT_FIELDS_::/g, eventObjectFields);\n          })\n          .join('\\n');\n\n        const eventObjectUsings = eventObjectAliases.jobs\n          .map(eventObjectTypeName => {\n            return `  using ${eventObjectTypeName.replace(\n              'on',\n              'On',\n            )} = ${componentName}_${eventObjectTypeName.replace('on', 'On')};`;\n          })\n          .join('\\n');\n\n        const eventEmitter = eventEmitterTemplate\n          .replace(/::_COMPONENT_EVENT_OBJECT_TYPES_::/g, eventObjects)\n          .replace(/::_EVENT_EMITTER_METHODS_::/g, eventEmitterMethods)\n          .replace(/::_EVENT_EMITTER_USINGS_::/g, eventObjectUsings);\n\n        // Commands\n        const commandAliases: AliasMap<\n          ObjectTypeAnnotation<CommandParamTypeAnnotation>\n        > = {types: {}, jobs: []};\n        const hasAnyCommands = componentShape.commands.length !== 0;\n        const commandHandlers = hasAnyCommands\n          ? componentShape.commands\n              .map(command => {\n                const commandArgs = command.typeAnnotation.params\n                  .map(param => {\n                    const commandArgType = translateCommandParamType(\n                      param.typeAnnotation,\n                      commandAliases,\n                      `${componentName}_${command.name}`,\n                      cppCodegenOptions,\n                    );\n                    return `${\n                      param.optional &&\n                      !commandArgType.alreadySupportsOptionalOrHasDefault\n                        ? `std::optional<${commandArgType.type}>`\n                        : commandArgType.type\n                    } ${param.name}`;\n                  })\n                  .join(', ');\n\n                return `  // You must provide an implementation of this method to handle the \"${\n                  command.name\n                }\" command\n  virtual void Handle${capitalizeFirstLetter(\n    command.name,\n  )}Command(${commandArgs}) noexcept = 0;`;\n              })\n              .join('\\n\\n')\n          : '';\n\n        const commandHandler = hasAnyCommands\n          ? `void HandleCommand(const winrt::Microsoft::ReactNative::ComponentView &view, const winrt::Microsoft::ReactNative::HandleCommandArgs& args) noexcept {\n    auto userData = view.UserData().as<TUserData>();\n    auto commandName = args.CommandName();\n${componentShape.commands\n  .map(command => {\n    const commaSeparatedCommandArgs = command.typeAnnotation.params\n      .map(param => param.name)\n      .join(', ');\n    return `    if (commandName == L\"${command.name}\") {\n${\n  command.typeAnnotation.params.length !== 0\n    ? `      ${command.typeAnnotation.params\n        .map(param => {\n          const commandArgType = translateCommandParamType(\n            param.typeAnnotation,\n            commandAliases,\n            `${componentName}_${command.name}`,\n            cppCodegenOptions,\n          );\n          return `${\n            param.optional &&\n            !commandArgType.alreadySupportsOptionalOrHasDefault\n              ? `std::optional<${commandArgType.type}>`\n              : commandArgType.type\n          } ${param.name};`;\n        })\n        .join('\\n')}\n      winrt::Microsoft::ReactNative::ReadArgs(args.CommandArgs(), ${commaSeparatedCommandArgs});`\n    : ''\n}\n      userData->Handle${capitalizeFirstLetter(\n        command.name,\n      )}Command(${commaSeparatedCommandArgs});\n      return;\n    }`;\n  })\n  .join('\\n\\n')}\n  }`\n          : '';\n\n        const registerCommandHandler = hasAnyCommands\n          ? `        builder.SetCustomCommandHandler([](const winrt::Microsoft::ReactNative::ComponentView &view,\n                                          const winrt::Microsoft::ReactNative::HandleCommandArgs& args) noexcept {\n          auto userData = view.UserData().as<TUserData>();\n          userData->HandleCommand(view, args);\n        });`\n          : '';\n\n        const baseType = baseStructTemplate\n          .replace(/::_COMPONENT_VIEW_COMMAND_HANDLERS_::/g, commandHandlers)\n          .replace(/::_COMPONENT_VIEW_COMMAND_HANDLER_::/g, commandHandler);\n\n        // Registration\n        const componentRegistration = registerTemplate.replace(\n          /::_REGISTER_CUSTOM_COMMAND_HANDLER_::/g,\n          registerCommandHandler,\n        );\n\n        // Final output\n        const replaceContent = function (template: string): string {\n          return template\n            .replace(/::_COMPONENT_PROP_OBJECT_TYPES_::/g, propObjectTypes)\n            .replace(/::_COMPONENT_PROP_TYPES_::/g, propsTemplate)\n            .replace(/::_COMPONENT_EVENT_EMITTER_::/g, eventEmitter)\n            .replace(/::_BASE_COMPONENT_STRUCT_::/g, baseType)\n            .replace(/::_COMPONENT_REGISTRATION_::/g, componentRegistration)\n            .replace(/::_EVENT_EMITTER_NAME_::/g, eventEmitterName)\n            .replace(/::_PROPS_NAME_::/g, propsName)\n            .replace(/::_COMPONENT_NAME_::/g, componentName)\n            .replace(/::_PROP_INITIALIZERS_::/g, propInitializers)\n            .replace(/::_PROPS_FIELDS_::/g, propsFields)\n            .replace(/::_NAMESPACE_::/g, namespace)\n            .replace(/\\n\\n\\n+/g, '\\n\\n');\n        };\n\n        files.set(`${componentName}.g.h`, replaceContent(fileTemplate));\n      }\n    }\n\n    return files;\n  };\n}\n"]}