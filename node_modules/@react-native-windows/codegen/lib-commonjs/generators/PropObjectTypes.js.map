{"version":3,"file":"PropObjectTypes.js","sourceRoot":"","sources":["../../src/generators/PropObjectTypes.ts"],"names":[],"mappings":";;;AAEA,mDAGyB;AAGzB,sCAAsC;AACtC,SAAgB,gCAAgC,CAAC,IAAwB,EACvE,OAA2D,EAC3D,aAAqB,EACrB,OAA0B;IAC1B,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,mCAAmC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACpJ,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,mCAAmC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACxI,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,mCAAmC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACzI,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,mCAAmC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC1I,KAAK,uBAAuB;YAC1B,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,mCAAmC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACvI,KAAK,qBAAqB;YAExB,IAAI,gBAAgB,GAAG,EAAE,CAAC;YAC1B,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;gBAC7B,KAAK,uBAAuB;oBAC1B,gBAAgB,GAAG,MAAM,CAAC;oBAC1B,MAAM;gBACR,KAAK,sBAAsB;oBACzB,gBAAgB,GAAG,QAAQ,CAAC;oBAC5B,MAAM;gBACR,KAAK,qBAAqB;oBACxB,gBAAgB,GAAG,OAAO,CAAC;oBAC3B,MAAM;gBACR,KAAK,qBAAqB;oBACxB,gBAAgB,GAAG,SAAS,CAAC;oBAC7B,MAAM;gBACR,KAAK,sBAAsB;oBACzB,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC;oBACzC,MAAM;gBACR,KAAK,qBAAqB;oBACxB,MAAM,SAAS,GAAG,gCAAgC,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;oBACtG,gBAAgB,GAAG,eAAe,SAAS,CAAC,IAAI,GAAG,CAAC;oBACpD,MAAM;gBACR,KAAK,sBAAsB;oBACzB,gBAAgB,GAAG,gCAAgC,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC;oBAC5G,MAAM;gBACR,KAAK,4BAA4B;oBAC/B,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;wBAC7B,KAAK,gBAAgB;4BACnB,gBAAgB,GAAG,sCAAsC,CAAC;4BAC1D,MAAM;wBACR,KAAK,oBAAoB,CAAC;wBAC1B,KAAK,qBAAqB,CAAC;wBAC3B,KAAK,uBAAuB,CAAC;wBAC7B,KAAK,sBAAsB,CAAC;wBAC5B,KAAK,gBAAgB;4BACnB,gBAAgB,GAAG,wCAAwC,CAAC,CAAC,sDAAsD;4BACnH,MAAM;wBACR;4BACE,MAAM,IAAI,KAAK,CAAC,8CAA8C,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;qBAC1F;oBACD,MAAM;gBACR,KAAK,0BAA0B;oBAC7B,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,8DAA8D;oBACxG,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;aACnD;YAED,OAAO,EAAE,IAAI,EAAE,eAAe,gBAAgB,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QACvE,KAAK,4BAA4B;YAC/B,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,gBAAgB;oBACnB,OAAO,EAAE,IAAI,EAAE,sCAAsC,EAAE,WAAW,EAAE,WAAW,EAAE,mCAAmC,EAAE,IAAI,EAAE,CAAC;gBAC/H,KAAK,oBAAoB,CAAC;gBAC1B,KAAK,qBAAqB,CAAC;gBAC3B,KAAK,uBAAuB,CAAC;gBAC7B,KAAK,sBAAsB,CAAC;gBAC5B,KAAK,gBAAgB;oBACnB,OAAO,EAAE,IAAI,EAAE,wCAAwC,EAAE,WAAW,EAAE,WAAW,EAAE,mCAAmC,EAAE,IAAI,EAAE,CAAC,CAAC,sDAAsD;gBACxL;oBACE,MAAM,IAAI,KAAK,CAAC,8CAA8C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;aAC9E;QACH,KAAK,sBAAsB,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,EAAE,IAAA,wCAAwB,EAA2C,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;SACpI;QACD,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,wCAAwC,EAAE,WAAW,EAAE,WAAW,EAAE,mCAAmC,EAAE,IAAI,EAAE,CAAC;QACjI,KAAK,yBAAyB;YAC5B,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,8DAA8D;QAC7G,KAAK,0BAA0B;YAC7B,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,4DAA4D;QACvH;YACE,MAAM,IAAI,KAAK,CAAC,mBAAoB,IAAY,CAAC,IAAI,EAAE,CAAC,CAAC;KAC5D;AACH,CAAC;AA1FD,4EA0FC;AAED,SAAgB,2BAA2B,CAAC,IAAyB,EACnE,OAA4D,EAC5D,aAAqB,EACrB,OAA0B;IAC1B,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAC1D,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC9C,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC/C,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAChD,KAAK,uBAAuB;YAC1B,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC7C,KAAK,qBAAqB;YACxB;gBACE,IAAI,gBAAgB,GAAG,EAAE,CAAC;gBAC1B,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;oBAC7B,KAAK,uBAAuB;wBAC1B,gBAAgB,GAAG,MAAM,CAAC;wBAC1B,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,QAAQ,CAAC;wBAC5B,MAAM;oBACR,KAAK,qBAAqB;wBACxB,gBAAgB,GAAG,OAAO,CAAC;wBAC3B,MAAM;oBACR,KAAK,qBAAqB;wBACxB,gBAAgB,GAAG,SAAS,CAAC;wBAC7B,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC;wBACzC,MAAM;oBACR,KAAK,qBAAqB;wBACxB,MAAM,SAAS,GAAG,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;wBACjG,gBAAgB,GAAG,eAAe,SAAS,CAAC,IAAI,GAAG,CAAC;wBACpD,MAAM;oBACR,KAAK,qBAAqB;wBACxB,gBAAgB,GAAG,wCAAwC,CAAC;wBAC5D,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC;wBACvG,MAAM;oBACR,KAAK,0BAA0B;wBAC7B,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,8DAA8D;wBACxG,MAAM;oBACR;wBACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;iBACnD;gBAED,OAAO,EAAE,IAAI,EAAE,eAAe,gBAAgB,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;aACxE;QACH,KAAK,sBAAsB,CAAC,CAAC;YAC3B,OAAO,EAAE,IAAI,EAAE,IAAA,wCAAwB,EAA4C,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;SACrI;QACD,KAAK,qBAAqB,CAAC,CAAC;YAC1B,OAAO,EAAE,IAAI,EAAE,wCAAwC,EAAE,WAAW,EAAE,WAAW,EAAE,mCAAmC,EAAE,IAAI,EAAE,CAAC;SAChI;QACD,KAAK,0BAA0B;YAC7B,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAE,8DAA8D;QAC1H;YACE,MAAM,IAAI,KAAK,CAAC,mBAAoB,IAAY,CAAC,IAAI,EAAE,CAAC,CAAC;KAC5D;AACH,CAAC;AAhED,kEAgEC;AAGD,SAAgB,yBAAyB,CAAC,IAAgC,EACxE,OAAmE,EACnE,aAAqB,EACrB,OAA0B;IAC1B,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAC1D,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC9C,KAAK,sBAAsB;YACzB,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC/C,KAAK,qBAAqB;YACxB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAChD,KAAK,uBAAuB;YAC1B,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAC7C,KAAK,qBAAqB;YACxB;gBACE,IAAI,gBAAgB,GAAG,EAAE,CAAC;gBAC1B,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;oBAC7B,KAAK,uBAAuB;wBAC1B,gBAAgB,GAAG,MAAM,CAAC;wBAC1B,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,QAAQ,CAAC;wBAC5B,MAAM;oBACR,KAAK,qBAAqB;wBACxB,gBAAgB,GAAG,OAAO,CAAC;wBAC3B,MAAM;oBACR,KAAK,qBAAqB;wBACxB,gBAAgB,GAAG,SAAS,CAAC;wBAC7B,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC;wBACzC,MAAM;oBACR,KAAK,qBAAqB;wBACxB,MAAM,SAAS,GAAG,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;wBAC/F,gBAAgB,GAAG,eAAe,SAAS,CAAC,IAAI,GAAG,CAAC;wBACpD,MAAM;oBACR,KAAK,4BAA4B;wBAC/B,gBAAgB,GAAG,wCAAwC,CAAC;wBAC5D,MAAM;oBACR,KAAK,sBAAsB;wBACzB,gBAAgB,GAAG,8CAA8C,CAAC,CAAC,uBAAuB;wBAC1F,MAAM;oBACR,KAAK,0BAA0B;wBAC7B,gBAAgB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,8DAA8D;wBACxG,MAAM;oBACR,KAAK,uBAA8B,EAAE,wFAAwF;wBAC3H,gBAAgB,GAAG,wCAAwC,CAAC;wBAC5D,MAAM;oBACR;wBACE,MAAM,IAAI,KAAK,CAAC,mBAAoB,IAAI,CAAC,WAAmB,CAAC,IAAI,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;iBACvH;gBAED,OAAO,EAAE,IAAI,EAAE,eAAe,gBAAgB,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;aACxE;QACH,KAAK,wBAAwB;YAC3B,IAAK,IAAI,CAAC,IAAY,KAAK,SAAS,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,qCAAqC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;aAClE;YACD,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC;QAC/C;YACE,MAAM,IAAI,KAAK,CAAC,mBAAoB,IAAY,CAAC,IAAI,EAAE,CAAC,CAAC;KAC5D;AACH,CAAC;AAhED,8DAgEC","sourcesContent":["import type { PropTypeAnnotation, ObjectTypeAnnotation, EventTypeAnnotation, CommandParamTypeAnnotation } from '@react-native/codegen/lib/CodegenSchema';\nimport type { CppCodegenOptions } from './ObjectTypes';\nimport {\n  AliasMap,\n  getAnonymousAliasCppName,\n} from './AliasManaging';\n\n\n// eslint-disable-next-line complexity\nexport function translateComponentPropsFieldType(type: PropTypeAnnotation,\n  aliases: AliasMap<ObjectTypeAnnotation<PropTypeAnnotation>>,\n  baseAliasName: string,\n  options: CppCodegenOptions): { type: string, initializer: string, alreadySupportsOptionalOrHasDefault?: boolean } {\n  switch (type.type) {\n    case 'StringTypeAnnotation':\n      return { type: options.cppStringType, initializer: type.default ? `{${type.default}}` : '', alreadySupportsOptionalOrHasDefault: !!type.default };\n    case 'FloatTypeAnnotation':\n      return { type: 'float', initializer: type.default ? `{${type.default}}` : '{}', alreadySupportsOptionalOrHasDefault: !!type.default };\n    case 'DoubleTypeAnnotation':\n      return { type: 'double', initializer: type.default ? `{${type.default}}` : '{}', alreadySupportsOptionalOrHasDefault: !!type.default };\n    case 'Int32TypeAnnotation':\n      return { type: 'int32_t', initializer: type.default ? `{${type.default}}` : '{}', alreadySupportsOptionalOrHasDefault: !!type.default };\n    case 'BooleanTypeAnnotation':\n      return { type: 'bool', initializer: type.default ? `{${type.default}}` : '{}', alreadySupportsOptionalOrHasDefault: !!type.default };\n    case 'ArrayTypeAnnotation':\n\n      let arrayTemplateArg = '';\n      switch (type.elementType.type) {\n        case 'BooleanTypeAnnotation':\n          arrayTemplateArg = 'bool';\n          break;\n        case 'DoubleTypeAnnotation':\n          arrayTemplateArg = 'double';\n          break;\n        case 'FloatTypeAnnotation':\n          arrayTemplateArg = 'float';\n          break;\n        case 'Int32TypeAnnotation':\n          arrayTemplateArg = 'int32_t';\n          break;\n        case 'StringTypeAnnotation':\n          arrayTemplateArg = options.cppStringType;\n          break;\n        case 'ArrayTypeAnnotation':\n          const innerType = translateComponentPropsFieldType(type.elementType, aliases, baseAliasName, options);\n          arrayTemplateArg = `std::vector<${innerType.type}>`;\n          break;\n        case 'ObjectTypeAnnotation':\n          arrayTemplateArg = translateComponentPropsFieldType(type.elementType, aliases, baseAliasName, options).type;\n          break;\n        case 'ReservedPropTypeAnnotation':\n          switch (type.elementType.name) {\n            case 'ColorPrimitive':\n              arrayTemplateArg = 'winrt::Microsoft::ReactNative::Color';\n              break;\n            case 'DimensionPrimitive':\n            case 'EdgeInsetsPrimitive':\n            case 'ImageRequestPrimitive':\n            case 'ImageSourcePrimitive':\n            case 'PointPrimitive':\n              arrayTemplateArg = 'winrt::Microsoft::ReactNative::JSValue'; // TODO - better handling for these types than JSValue\n              break;\n            default:\n              throw new Error(`Unhandled ReservedPropTypeAnnotation type: ${type.elementType.name}`);\n          }\n          break;\n        case 'StringEnumTypeAnnotation':\n          arrayTemplateArg = options.cppStringType; // TODO - better enum type handling than just passing a string\n          break;\n        default:\n          throw new Error(`Unhandled type: ${type.type}`);\n      }\n\n      return { type: `std::vector<${arrayTemplateArg}>`, initializer: '' };\n    case 'ReservedPropTypeAnnotation':\n      switch (type.name) {\n        case 'ColorPrimitive':\n          return { type: 'winrt::Microsoft::ReactNative::Color', initializer: '{nullptr}', alreadySupportsOptionalOrHasDefault: true };\n        case 'DimensionPrimitive':\n        case 'EdgeInsetsPrimitive':\n        case 'ImageRequestPrimitive':\n        case 'ImageSourcePrimitive':\n        case 'PointPrimitive':\n          return { type: 'winrt::Microsoft::ReactNative::JSValue', initializer: '{nullptr}', alreadySupportsOptionalOrHasDefault: true }; // TODO - better handling for these types than JSValue\n        default:\n          throw new Error(`Unhandled ReservedPropTypeAnnotation type: ${type.name}`);\n      }\n    case 'ObjectTypeAnnotation': {\n      return { type: getAnonymousAliasCppName<ObjectTypeAnnotation<PropTypeAnnotation>>(aliases, baseAliasName, type), initializer: '' };\n    }\n    case 'MixedTypeAnnotation':\n      return { type: 'winrt::Microsoft::ReactNative::JSValue', initializer: '{nullptr}', alreadySupportsOptionalOrHasDefault: true };\n    case 'Int32EnumTypeAnnotation':\n      return { type: 'int32_t', initializer: '' }; // TODO - better enum type handling than just passing a string\n    case 'StringEnumTypeAnnotation':\n      return { type: options.cppStringType, initializer: '' }; // TODO - better enum type handling than just passing an int\n    default:\n      throw new Error(`Unhandled type: ${(type as any).type}`);\n  }\n}\n\nexport function translateComponentEventType(type: EventTypeAnnotation,\n  aliases: AliasMap<ObjectTypeAnnotation<EventTypeAnnotation>>,\n  baseAliasName: string,\n  options: CppCodegenOptions): { type: string, initializer: string, alreadySupportsOptionalOrHasDefault?: boolean } {\n  switch (type.type) {\n    case 'StringTypeAnnotation':\n      return { type: options.cppStringType, initializer: '' };\n    case 'FloatTypeAnnotation':\n      return { type: 'float', initializer: '{}' };\n    case 'DoubleTypeAnnotation':\n      return { type: 'double', initializer: '{}' };\n    case 'Int32TypeAnnotation':\n      return { type: 'int32_t', initializer: '{}' };\n    case 'BooleanTypeAnnotation':\n      return { type: 'bool', initializer: '{}' };\n    case 'ArrayTypeAnnotation':\n      {\n        let arrayTemplateArg = '';\n        switch (type.elementType.type) {\n          case 'BooleanTypeAnnotation':\n            arrayTemplateArg = 'bool';\n            break;\n          case 'DoubleTypeAnnotation':\n            arrayTemplateArg = 'double';\n            break;\n          case 'FloatTypeAnnotation':\n            arrayTemplateArg = 'float';\n            break;\n          case 'Int32TypeAnnotation':\n            arrayTemplateArg = 'int32_t';\n            break;\n          case 'StringTypeAnnotation':\n            arrayTemplateArg = options.cppStringType;\n            break;\n          case 'ArrayTypeAnnotation':\n            const innerType = translateComponentEventType(type.elementType, aliases, baseAliasName, options);\n            arrayTemplateArg = `std::vector<${innerType.type}>`;\n            break;\n          case 'MixedTypeAnnotation':\n            arrayTemplateArg = 'winrt::Microsoft::ReactNative::JSValue';\n            break;\n          case 'ObjectTypeAnnotation':\n            arrayTemplateArg = translateComponentEventType(type.elementType, aliases, baseAliasName, options).type;\n            break;\n          case 'StringEnumTypeAnnotation':\n            arrayTemplateArg = options.cppStringType; // TODO - better enum type handling than just passing a string\n            break;\n          default:\n            throw new Error(`Unhandled type: ${type.type}`);\n        }\n\n        return { type: `std::vector<${arrayTemplateArg}>`, initializer: '{}' };\n      }\n    case 'ObjectTypeAnnotation': {\n      return { type: getAnonymousAliasCppName<ObjectTypeAnnotation<EventTypeAnnotation>>(aliases, baseAliasName, type), initializer: '' };\n    }\n    case 'MixedTypeAnnotation': {\n      return { type: 'winrt::Microsoft::ReactNative::JSValue', initializer: '{nullptr}', alreadySupportsOptionalOrHasDefault: true };\n    }\n    case 'StringEnumTypeAnnotation':\n      return { type: options.cppStringType, initializer: '' };  // TODO - better enum type handling than just passing a string\n    default:\n      throw new Error(`Unhandled type: ${(type as any).type}`);\n  }\n}\n\n\nexport function translateCommandParamType(type: CommandParamTypeAnnotation,\n  aliases: AliasMap<ObjectTypeAnnotation<CommandParamTypeAnnotation>>,\n  baseAliasName: string,\n  options: CppCodegenOptions): { type: string, initializer: string, alreadySupportsOptionalOrHasDefault?: boolean } {\n  switch (type.type) {\n    case 'StringTypeAnnotation':\n      return { type: options.cppStringType, initializer: '' };\n    case 'FloatTypeAnnotation':\n      return { type: 'float', initializer: '{}' };\n    case 'DoubleTypeAnnotation':\n      return { type: 'double', initializer: '{}' };\n    case 'Int32TypeAnnotation':\n      return { type: 'int32_t', initializer: '{}' };\n    case 'BooleanTypeAnnotation':\n      return { type: 'bool', initializer: '{}' };\n    case 'ArrayTypeAnnotation':\n      {\n        let arrayTemplateArg = '';\n        switch (type.elementType.type) {\n          case 'BooleanTypeAnnotation':\n            arrayTemplateArg = 'bool';\n            break;\n          case 'DoubleTypeAnnotation':\n            arrayTemplateArg = 'double';\n            break;\n          case 'FloatTypeAnnotation':\n            arrayTemplateArg = 'float';\n            break;\n          case 'Int32TypeAnnotation':\n            arrayTemplateArg = 'int32_t';\n            break;\n          case 'StringTypeAnnotation':\n            arrayTemplateArg = options.cppStringType;\n            break;\n          case 'ArrayTypeAnnotation':\n            const innerType = translateCommandParamType(type.elementType, aliases, baseAliasName, options);\n            arrayTemplateArg = `std::vector<${innerType.type}>`;\n            break;\n          case 'ReservedPropTypeAnnotation':\n            arrayTemplateArg = 'winrt::Microsoft::ReactNative::JSValue';\n            break;\n          case 'ObjectTypeAnnotation':\n            arrayTemplateArg = 'winrt::Microsoft::ReactNative::JSValueObject'; // TODO - better typing\n            break;\n          case 'StringEnumTypeAnnotation':\n            arrayTemplateArg = options.cppStringType; // TODO - better enum type handling than just passing a string\n            break;\n          case 'GenericTypeAnnotation' as any: // TODO verify schema - Getting this type when running codegen on all the built in types\n            arrayTemplateArg = 'winrt::Microsoft::ReactNative::JSValue';\n            break;\n          default:\n            throw new Error(`Unhandled type: ${(type.elementType as any).type} - ${JSON.stringify(type.elementType, null, 2)}`);\n        }\n\n        return { type: `std::vector<${arrayTemplateArg}>`, initializer: '{}' };\n      }\n    case 'ReservedTypeAnnotation': \n      if ((type.name as any) !== 'RootTag') {\n        throw new Error(`Unhandled ReservedTypeAnnotation: ${type.name}`)\n      }\n      return { type: 'bool', initializer: '{-1}' };\n    default:\n      throw new Error(`Unhandled type: ${(type as any).type}`);\n  }\n}"]}