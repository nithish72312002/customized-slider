{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../src/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport * as coreOneDS from '@microsoft/1ds-core-js';\nimport {PostChannel, IChannelConfiguration} from '@microsoft/1ds-post-js';\n\nimport * as basePropUtils from './utils/basePropUtils';\nimport * as versionUtils from './utils/versionUtils';\nimport * as errorUtils from './utils/errorUtils';\nimport * as projectUtils from './utils/projectUtils';\nimport * as nameUtils from './utils/nameUtils';\n\nexport interface TelemetryOptions {\n  setupString: string;\n  preserveErrorMessages: boolean;\n  populateNpmPackageVersions: boolean;\n}\n\nexport interface CommandStartInfo {\n  commandName: string;\n  args: Record<string, any>;\n  options: Record<string, any>;\n  defaultOptions: Record<string, any>;\n}\n\nexport interface CommandEndInfo {\n  resultCode: errorUtils.CodedErrorType;\n}\n\ninterface CommandInfo {\n  startTime?: number;\n  endTime?: number;\n  startInfo?: CommandStartInfo;\n  endInfo?: CommandEndInfo;\n}\n\n// 1DS instrumentation key\nconst RNW_1DS_INSTRUMENTATION_KEY =\n  '49ff6d3ef12f4578a7b75a2573d9dba8-026332b2-2d50-452f-ad0d-50f921c97a9d-7145';\n\n// Environment variable to override the default setup string\nconst ENV_SETUP_OVERRIDE = 'RNW_TELEMETRY_SETUP';\n\n// Environment variable to override the http proxy (such as http://localhost:8888 for Fiddler debugging)\nconst ENV_PROXY_OVERRIDE = 'RNW_TELEMETRY_PROXY';\n\nexport const CommandEventName = 'RNWCLI.Command';\nexport const CodedErrorEventName = 'RNWCLI.CodedError';\n\n// These are the event names we're tracking\nexport const EventNamesWeTrack: string[] = [\n  CommandEventName,\n  CodedErrorEventName,\n];\n\n// These are NPM packages we care about, in terms of capturing versions used\n// and getting more details about when reporting errors\nexport const NpmPackagesWeTrack: string[] = [\n  '@react-native-community/cli',\n  '@react-native-windows/cli',\n  '@react-native-windows/telemetry',\n  'react',\n  'react-native',\n  'react-native-windows',\n  'react-native-windows-init',\n];\n\n// These are NPM packages we care about, in terms of capturing versions used\nexport const NuGetPackagesWeTrack: string[] = [\n  'Microsoft.UI.Xaml',\n  'Microsoft.Windows.CppWinRT',\n  'Microsoft.WinUI',\n];\n\n/**\n * The Telemetry class is responsible for reporting telemetry for RNW CLI.\n */\nexport class Telemetry {\n  protected static appInsightsCore?: coreOneDS.AppInsightsCore = undefined;\n\n  protected static options: TelemetryOptions = {\n    setupString: Telemetry.getDefaultSetupString(), // We default to our 1DS instrumentation key, but callers can easily override it in setup.\n    preserveErrorMessages: false,\n    populateNpmPackageVersions: true,\n  };\n\n  protected static isTestEnvironment: boolean = basePropUtils.isCliTest();\n\n  protected static commandInfo: CommandInfo = {};\n\n  // Stores the version of a list of packages used by the RNW app project.\n  protected static versionsProp: Record<string, string> = {};\n\n  protected static projectProp?:\n    | projectUtils.AppProjectInfo\n    | projectUtils.DependencyProjectInfo = undefined;\n\n  // Store \"Common Properties\" in a single object. This will be logged in all telemetry events.\n  protected static commonProperties: {[key: string]: string} = {};\n\n  protected static getDefaultSetupString(): string {\n    // Enable overriding the default setup string via an environment variable\n    return process.env[ENV_SETUP_OVERRIDE] ?? RNW_1DS_INSTRUMENTATION_KEY;\n  }\n\n  protected static reset(): void {\n    // Reset client\n    if (Telemetry.appInsightsCore) {\n      Telemetry.appInsightsCore.flush();\n      Telemetry.appInsightsCore = undefined;\n    }\n\n    // Reset local members\n    Telemetry.options = {\n      setupString: Telemetry.getDefaultSetupString(),\n      preserveErrorMessages: false,\n      populateNpmPackageVersions: true,\n    };\n    Telemetry.commandInfo = {};\n    Telemetry.versionsProp = {};\n    Telemetry.projectProp = undefined;\n  }\n\n  static isEnabled(): boolean {\n    return Telemetry.appInsightsCore !== undefined;\n  }\n\n  static getSessionId(): string {\n    return basePropUtils.getSessionId();\n  }\n\n  /** Sets up the Telemetry static to be used elsewhere. */\n  static async setup(options?: Partial<TelemetryOptions>) {\n    if (Telemetry.appInsightsCore) {\n      // Bail since we've already setup\n      return;\n    }\n\n    // Bail if we're in CI and not capturing CI\n    if (\n      !Telemetry.isTestEnvironment &&\n      basePropUtils.isCI() &&\n      !basePropUtils.captureCI()\n    ) {\n      return;\n    }\n\n    // Save off options for later\n    Object.assign(Telemetry.options, options);\n\n    Telemetry.setupClient();\n\n    await Telemetry.setupBaseProperties();\n  }\n\n  private static basicTelemetryInitializer(\n    envelope: coreOneDS.ITelemetryItem,\n  ): boolean {\n    // Filter out \"legacy\" events from older stable branches\n    if (envelope.name && EventNamesWeTrack.includes(envelope.name)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /** Sets up Telemetry.appInsightsCore. */\n  private static setupClient() {\n    const postChannel: PostChannel = new PostChannel();\n\n    const coreConfiguration: coreOneDS.IExtendedConfiguration = {\n      instrumentationKey: Telemetry.getDefaultSetupString(),\n    };\n\n    const postChannelConfig: IChannelConfiguration = {\n      eventsLimitInMem: 5000,\n    };\n\n    coreConfiguration.extensionConfig = {};\n    coreConfiguration.extensionConfig[postChannel.identifier] =\n      postChannelConfig;\n\n    // Allow overriding the endpoint URL via an environment variable.\n    if (process.env[ENV_PROXY_OVERRIDE] !== undefined) {\n      coreConfiguration.endpointUrl = process.env[ENV_PROXY_OVERRIDE];\n    }\n\n    Telemetry.appInsightsCore = new coreOneDS.AppInsightsCore();\n    Telemetry.appInsightsCore.initialize(\n      coreConfiguration,\n      [postChannel] /* extensions */,\n    );\n\n    Telemetry.appInsightsCore.addTelemetryInitializer(\n      Telemetry.basicTelemetryInitializer,\n    );\n  }\n\n  /** Sets up any base properties that all telemetry events require. */\n  private static async setupBaseProperties() {\n    Telemetry.commonProperties.deviceId = await basePropUtils.deviceId();\n    Telemetry.commonProperties.fullBuildInfo =\n      await basePropUtils.fullBuildInfo();\n    Telemetry.commonProperties.deviceArchitecture =\n      basePropUtils.deviceArchitecture();\n    Telemetry.commonProperties.nodeArchitecture =\n      basePropUtils.nodeArchitecture();\n    Telemetry.commonProperties.nodePlatform = basePropUtils.nodePlatform();\n    Telemetry.commonProperties.deviceClass = basePropUtils.deviceClass();\n    Telemetry.commonProperties.deviceLocale =\n      await basePropUtils.deviceLocale();\n    Telemetry.commonProperties.deviceNumCPUs = basePropUtils\n      .deviceNumCPUs()\n      .toString();\n    Telemetry.commonProperties.deviceTotalMemory = basePropUtils\n      .deviceTotalMemory()\n      .toString();\n    Telemetry.commonProperties.deviceDiskFreeSpace = basePropUtils\n      .deviceDiskFreeSpace()\n      .toString();\n    Telemetry.commonProperties.ciCaptured = basePropUtils\n      .captureCI()\n      .toString();\n    Telemetry.commonProperties.ciType = basePropUtils.ciType();\n    Telemetry.commonProperties.isMsftInternal = basePropUtils\n      .isMsftInternal()\n      .toString();\n    Telemetry.commonProperties.isTest = Telemetry.isTestEnvironment.toString();\n    Telemetry.commonProperties.sessionId = Telemetry.getSessionId();\n\n    await Telemetry.populateToolsVersions();\n    if (Telemetry.options.populateNpmPackageVersions) {\n      await Telemetry.populateNpmPackageVersions();\n    }\n  }\n\n  /** Tries to update the version of the named package/tool by calling getValue(). */\n  static async tryUpdateVersionsProp(\n    name: string,\n    getValue: () => Promise<string | null>,\n    forceRefresh?: boolean,\n  ): Promise<boolean> {\n    if (!Telemetry.appInsightsCore) {\n      return true;\n    }\n\n    // Process the package name to comply with the backend requirements\n    const packageName = nameUtils.isValidTelemetryPackageName(name)\n      ? name\n      : nameUtils.cleanTelemetryPackageName(name);\n\n    if (forceRefresh === true || !Telemetry.versionsProp[packageName]) {\n      const value = await getValue();\n      if (value) {\n        Telemetry.versionsProp[packageName] = value;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Populates the versions property of tools we care to track. */\n  static async populateToolsVersions(refresh?: boolean) {\n    await Telemetry.tryUpdateVersionsProp(\n      'node',\n      versionUtils.getNodeVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'npm',\n      versionUtils.getNpmVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'yarn',\n      versionUtils.getYarnVersion,\n      refresh,\n    );\n    await Telemetry.tryUpdateVersionsProp(\n      'VisualStudio',\n      versionUtils.getVisualStudioVersion,\n      refresh,\n    );\n  }\n\n  /** Populates the versions property of npm packages we care to track. */\n  static async populateNpmPackageVersions(refresh?: boolean) {\n    for (const npmPackage of NpmPackagesWeTrack) {\n      await Telemetry.tryUpdateVersionsProp(\n        npmPackage,\n        async () => await versionUtils.getVersionOfNpmPackage(npmPackage),\n        refresh,\n      );\n    }\n  }\n\n  /** Populates the versions property of nuget packages we care to track. */\n  static async populateNuGetPackageVersions(\n    projectFile: string,\n    refresh?: boolean,\n  ) {\n    const nugetVersions = await versionUtils.getVersionsOfNuGetPackages(\n      projectFile,\n      NuGetPackagesWeTrack,\n    );\n\n    for (const nugetPackage of NuGetPackagesWeTrack) {\n      await Telemetry.tryUpdateVersionsProp(\n        nugetPackage,\n        async () => nugetVersions[nugetPackage],\n        refresh,\n      );\n    }\n  }\n\n  static setProjectInfo(\n    info: projectUtils.AppProjectInfo | projectUtils.DependencyProjectInfo,\n  ) {\n    if (!Telemetry.appInsightsCore) {\n      return;\n    }\n\n    Telemetry.projectProp = info;\n  }\n\n  static startCommand(info: CommandStartInfo) {\n    if (!Telemetry.appInsightsCore) {\n      return;\n    }\n\n    // startCommand() was called before invoking endCommand(), bail out.\n    if (Telemetry.commandInfo.startInfo) {\n      return;\n    }\n\n    Telemetry.commandInfo.startTime = Date.now();\n    Telemetry.commandInfo.startInfo = info;\n\n    // Set common command props\n    Telemetry.commonProperties.commandName = info.commandName;\n  }\n\n  static endCommand(info: CommandEndInfo, extraProps?: Record<string, any>) {\n    if (!Telemetry.appInsightsCore) {\n      return;\n    }\n\n    // startCommand() wasn't called, bail out.\n    if (!Telemetry.commandInfo.startInfo) {\n      return;\n    }\n\n    Telemetry.commandInfo.endTime = Date.now();\n    Telemetry.commandInfo.endInfo = info;\n\n    Telemetry.trackCommandEvent(extraProps);\n  }\n\n  private static trackEvent(telemetryItem: coreOneDS.ITelemetryItem) {\n    // Populate Part A\n    telemetryItem.ver = '4.0'; // Current Common Schema version\n    telemetryItem.time = new Date().toISOString();\n    telemetryItem.iKey = RNW_1DS_INSTRUMENTATION_KEY;\n\n    // Populate Part A extensions\n    telemetryItem.ext = {};\n    telemetryItem.ext.device = {\n      id: Telemetry.commonProperties.deviceId,\n      deviceClass: Telemetry.commonProperties.deviceClass,\n    };\n    telemetryItem.ext.os = {\n      locale: Telemetry.commonProperties.deviceLocale,\n      ver: Telemetry.commonProperties.fullBuildInfo,\n    };\n\n    // Populate most of \"common\" properties into Part B.\n    telemetryItem.baseData = {\n      common: {\n        device: {\n          architecture: Telemetry.commonProperties.deviceArchitecture,\n          numCPUs: Telemetry.commonProperties.numCPUs,\n          totalMemory: Telemetry.commonProperties.totalMemory,\n          diskFreeSpace: Telemetry.commonProperties.deviceDiskFreeSpace,\n        },\n        nodePlatform: Telemetry.commonProperties.nodePlatform,\n        nodeArchitecture: Telemetry.commonProperties.nodeArchitecture,\n        ciCaptured: Telemetry.commonProperties.ciCaptured,\n        ciType: Telemetry.commonProperties.ciType,\n        isMsftInternal: Telemetry.commonProperties.isMsftInternal,\n        isCliTest: Telemetry.commonProperties.isTest,\n        sessionId: Telemetry.commonProperties.sessionId,\n        commandName: Telemetry.commonProperties.commandName,\n      },\n      // Set project and versions props, belonging to Part B.\n      project: Telemetry.projectProp,\n      versions: Telemetry.versionsProp,\n    };\n\n    // Send and post the telemetry event!\n    Telemetry.appInsightsCore!.track(telemetryItem);\n    Telemetry.appInsightsCore!.flush();\n  }\n\n  private static trackCommandEvent(extraProps?: Record<string, any>) {\n    const telemetryItem: coreOneDS.ITelemetryItem = {name: CommandEventName};\n\n    // This is logged in Part C.\n    const command = {\n      options: Telemetry.commandInfo.startInfo?.options,\n      defaultOptions: Telemetry.commandInfo.startInfo?.defaultOptions,\n      args: Telemetry.commandInfo.startInfo?.args,\n      durationInSecs:\n        (Telemetry.commandInfo.endTime! - Telemetry.commandInfo.startTime!) /\n        1000,\n      resultCode: Telemetry.commandInfo.endInfo?.resultCode,\n    };\n\n    telemetryItem.data = {\n      command: command,\n    };\n\n    if (extraProps) {\n      telemetryItem.data.additionalData = extraProps;\n    }\n\n    // Populate common properties and fire event\n    Telemetry.trackEvent(telemetryItem);\n  }\n\n  static trackException(error: Error, extraProps?: Record<string, any>) {\n    if (!Telemetry.appInsightsCore) {\n      return;\n    }\n\n    const telemetryItem: coreOneDS.ITelemetryItem = {name: CodedErrorEventName};\n\n    // Save off CodedError info in Part C.\n    const codedError =\n      error instanceof errorUtils.CodedError\n        ? (error as errorUtils.CodedError)\n        : null;\n\n    const codedErrorStruct = {\n      type: codedError?.type ?? 'Unknown',\n      data: codedError?.data ?? {},\n    };\n\n    // Copy msBuildErrorMessages into the codedError.data object\n    if ((error as any).msBuildErrorMessages) {\n      // Always grab MSBuild error codes if possible\n      codedErrorStruct.data.msBuildErrors = (error as any).msBuildErrorMessages\n        .map(errorUtils.tryGetErrorCode)\n        .filter((msg: string | undefined) => msg);\n\n      // Grab sanitized MSBuild error messages if we're preserving them\n      if (Telemetry.options.preserveErrorMessages) {\n        codedErrorStruct.data.msBuildErrorMessages = (\n          error as any\n        ).msBuildErrorMessages\n          .map(errorUtils.sanitizeErrorMessage)\n          .filter((msg: string) => msg);\n      }\n    }\n\n    // Copy miscellaneous system error fields into the codedError.data object\n    const syscallExceptionFieldsToCopy = ['errno', 'syscall', 'code'];\n    for (const f of syscallExceptionFieldsToCopy) {\n      if ((error as any)[f]) {\n        codedErrorStruct.data[f] = (error as any)[f];\n      }\n    }\n\n    // Scrub any potential PII present in codedError.data array, as long as the data is a string.\n    codedErrorStruct.data = Telemetry.sanitizeAny(codedErrorStruct.data);\n\n    // Break down TS Error object into Exception Data\n    const exceptionData = Telemetry.convertErrorIntoExceptionData(error);\n\n    telemetryItem.data = {\n      codedError: codedErrorStruct,\n      exceptionData: exceptionData,\n    };\n\n    Telemetry.trackEvent(telemetryItem);\n  }\n\n  static convertErrorIntoExceptionData(error: Error): Record<string, any> {\n    const exceptionData = {\n      hasFullStack: false,\n      message: error.message,\n      parsedStack: {},\n    };\n\n    exceptionData.message = exceptionData.message || '[None]';\n\n    // CodedError has non-PII information in its 'type' member, plus optionally some more info in its 'data'.\n    // The message may contain PII information. This can be sanitized, but for now delete it.\n    if (Telemetry.options.preserveErrorMessages) {\n      exceptionData.message = errorUtils.sanitizeErrorMessage(\n        exceptionData.message,\n      );\n    } else {\n      exceptionData.message = '[Removed]';\n    }\n\n    const lines = error.stack?.split('\\n');\n\n    const parsedStack = lines?.slice(1).map(line => {\n      const errorStackFrame: errorUtils.ErrorStackFrame = {};\n\n      const match = line\n        .trim()\n        .match(/^\\s*at\\s+(?:(.*?)\\s+\\((.*):(\\d+):(\\d+)\\)|(.*):(\\d+):(\\d+))$/);\n      if (match) {\n        errorStackFrame.functionName = match[1] || 'N/A'; // Use a default value if no function name\n        errorStackFrame.filePath = match[2] || match[5];\n        errorStackFrame.lineNumber =\n          parseInt(match[3], 10) || parseInt(match[6], 10);\n        errorStackFrame.columnNumber =\n          parseInt(match[4], 10) || parseInt(match[7], 10);\n      }\n\n      return errorStackFrame;\n    });\n\n    if (parsedStack) {\n      parsedStack.filter(Boolean);\n\n      // Sanitize parsed error stack frames\n      for (const frame of parsedStack) {\n        errorUtils.sanitizeErrorStackFrame(frame);\n      }\n\n      exceptionData.hasFullStack = true;\n      exceptionData.parsedStack = parsedStack;\n    }\n\n    return exceptionData;\n  }\n\n  static sanitizeAny(data: any): any {\n    if (Array.isArray(data)) {\n      // This is an array, sanitize each element recursively.\n      return data.map(item => Telemetry.sanitizeAny(item));\n    } else if (typeof data === 'object' && data !== null) {\n      // This is an object, sanitize each field recursively.\n      const sanitizedObject: Record<string, any> = {};\n      for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          sanitizedObject[key] = Telemetry.sanitizeAny(data[key]);\n        }\n      }\n      return sanitizedObject;\n    } else if (typeof data === 'string') {\n      // The base case: this is a string, sanitize it.\n      return errorUtils.sanitizeErrorMessage(data);\n    }\n\n    // Not a string, return the data unchanged.\n    return data;\n  }\n}\n"]}