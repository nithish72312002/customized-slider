"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const nameUtils = __importStar(require("../utils/nameUtils"));
test('Verify telemetry package name is valid', () => {
    expect(nameUtils.isValidTelemetryPackageName('package')).toBe(true);
    expect(nameUtils.isValidTelemetryPackageName('@react')).toBe(false);
    expect(nameUtils.isValidTelemetryPackageName('react-native')).toBe(false);
    expect(nameUtils.isValidTelemetryPackageName('react_native')).toBe(true);
    expect(nameUtils.isValidTelemetryPackageName('react_native/cli')).toBe(false);
    // Check for size limits. A valid package name has 100 characters or less.
    expect(nameUtils.isValidTelemetryPackageName('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nat')).toBe(true);
    expect(nameUtils.isValidTelemetryPackageName('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nati')).toBe(false);
});
test('Verify telemetry package name cleaning', () => {
    expect(nameUtils.cleanTelemetryPackageName('package')).toBe('package');
    expect(nameUtils.cleanTelemetryPackageName('@react')).toBe('_react');
    expect(nameUtils.cleanTelemetryPackageName('react-native')).toBe('react_native');
    expect(nameUtils.cleanTelemetryPackageName('react_native')).toBe('react_native');
    expect(nameUtils.cleanTelemetryPackageName('react_native/cli')).toBe('react_native_cli');
    expect(nameUtils.cleanTelemetryPackageName('@react-native-windows/cli')).toBe('_react_native_windows_cli');
    expect(nameUtils.cleanTelemetryPackageName('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nat')).toBe('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nat');
    // Truncate a package name with 101 characters, to the first 100.
    expect(nameUtils.cleanTelemetryPackageName('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nati')).toBe('react_native_react_native_react_native_react_native_react_native_react_native_react_native_react_nat');
});
//# sourceMappingURL=nameUtils.test.js.map